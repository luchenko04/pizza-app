{"ast":null,"code":"const jose = require('jose');\nconst JwksError = require('./errors/JwksError');\nfunction resolveAlg(jwk) {\n  if (jwk.alg) {\n    return jwk.alg;\n  }\n  if (jwk.kty === 'RSA') {\n    return 'RS256';\n  }\n  if (jwk.kty === 'EC') {\n    switch (jwk.crv) {\n      case 'P-256':\n        return 'ES256';\n      case 'secp256k1':\n        return 'ES256K';\n      case 'P-384':\n        return 'ES384';\n      case 'P-521':\n        return 'ES512';\n    }\n  }\n  if (jwk.kty === 'OKP') {\n    switch (jwk.crv) {\n      case 'Ed25519':\n      case 'Ed448':\n        return 'EdDSA';\n    }\n  }\n  throw new JwksError('Unsupported JWK');\n}\nasync function retrieveSigningKeys(jwks) {\n  const results = [];\n  jwks = jwks.filter(({\n    use\n  }) => use === 'sig' || use === undefined).filter(({\n    kty\n  }) => kty === 'RSA' || kty === 'EC' || kty === 'OKP');\n  for (const jwk of jwks) {\n    try {\n      const key = await jose.importJWK(jwk, resolveAlg(jwk));\n      if (key.type !== 'public') {\n        continue;\n      }\n      let getSpki;\n      switch (key[Symbol.toStringTag]) {\n        case 'CryptoKey':\n          {\n            const spki = await jose.exportSPKI(key);\n            getSpki = () => spki;\n            break;\n          }\n        case 'KeyObject':\n        // Assume legacy Node.js version without the Symbol.toStringTag backported\n        // Fall through\n        default:\n          getSpki = () => key.export({\n            format: 'pem',\n            type: 'spki'\n          });\n      }\n      results.push({\n        get publicKey() {\n          return getSpki();\n        },\n        get rsaPublicKey() {\n          return getSpki();\n        },\n        getPublicKey() {\n          return getSpki();\n        },\n        ...(typeof jwk.kid === 'string' && jwk.kid ? {\n          kid: jwk.kid\n        } : undefined),\n        ...(typeof jwk.alg === 'string' && jwk.alg ? {\n          alg: jwk.alg\n        } : undefined)\n      });\n    } catch (err) {\n      continue;\n    }\n  }\n  return results;\n}\nmodule.exports = {\n  retrieveSigningKeys\n};","map":{"version":3,"names":["jose","require","JwksError","resolveAlg","jwk","alg","kty","crv","retrieveSigningKeys","jwks","results","filter","use","undefined","key","importJWK","type","getSpki","Symbol","toStringTag","spki","exportSPKI","export","format","push","publicKey","rsaPublicKey","getPublicKey","kid","err","module","exports"],"sources":["C:/Users/panki/OneDrive/Робочий стіл/pizza-app/node_modules/jwks-rsa/src/utils.js"],"sourcesContent":["const jose = require('jose');\nconst JwksError = require('./errors/JwksError');\n\nfunction resolveAlg(jwk) {\n  if (jwk.alg) {\n    return jwk.alg;\n  }\n\n  if (jwk.kty === 'RSA') {\n    return 'RS256';\n  }\n\n  if (jwk.kty === 'EC') {\n    switch (jwk.crv) {\n      case 'P-256':\n        return 'ES256';\n      case 'secp256k1':\n        return 'ES256K';\n      case 'P-384':\n        return 'ES384';\n      case 'P-521':\n        return 'ES512';\n    }\n  }\n\n  if (jwk.kty === 'OKP') {\n    switch (jwk.crv) {\n      case 'Ed25519':\n      case 'Ed448':\n        return 'EdDSA';\n    }\n  }\n\n  throw new JwksError('Unsupported JWK');\n}\n\nasync function retrieveSigningKeys(jwks) {\n  const results = [];\n\n  jwks = jwks\n    .filter(({ use }) => use === 'sig' || use === undefined)\n    .filter(({ kty }) => kty === 'RSA' || kty === 'EC' || kty === 'OKP');\n\n  for (const jwk of jwks) {\n    try {\n      const key = await jose.importJWK(jwk, resolveAlg(jwk));\n      if (key.type !== 'public') {\n        continue;\n      }\n      let getSpki;\n      switch (key[Symbol.toStringTag]) {\n        case 'CryptoKey': {\n          const spki = await jose.exportSPKI(key);\n          getSpki = () => spki;\n          break;\n        }\n        case 'KeyObject':\n          // Assume legacy Node.js version without the Symbol.toStringTag backported\n          // Fall through\n        default:\n          getSpki = () => key.export({ format: 'pem', type: 'spki' });\n      }\n      results.push({\n        get publicKey() { return getSpki(); },\n        get rsaPublicKey() { return getSpki(); },\n        getPublicKey() { return getSpki(); },\n        ...(typeof jwk.kid === 'string' && jwk.kid ? { kid: jwk.kid } : undefined),\n        ...(typeof jwk.alg === 'string' && jwk.alg ? { alg: jwk.alg } : undefined)\n      });\n    } catch (err) {\n      continue;\n    }\n  }\n\n  return results;\n}\n\nmodule.exports = {\n  retrieveSigningKeys\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}