{"ast":null,"code":"const express = require(\"express\");\nconst admin = require(\"firebase-admin\");\nconst bodyParser = require(\"body-parser\");\nconst cors = require(\"cors\");\nconst app = express();\napp.use(bodyParser.json());\napp.use(cors());\n\n// Initialize Firebase Admin\nconst serviceAccount = require(\"./serviceAccountKey.json\");\nadmin.initializeApp({\n  credential: admin.credential.cert(serviceAccount),\n  databaseURL: \"https://pizza-web-app-default-rtdb.europe-west1.firebasedatabase.app\"\n});\n\n// Firebase Authentication reference\nconst auth = admin.auth();\n\n// Registration Route\napp.post(\"/register\", async (req, res) => {\n  const {\n    email,\n    password,\n    name,\n    role = \"client\"\n  } = req.body;\n  if (!email || !password || !name) {\n    return res.status(400).json({\n      error: \"All fields are required\"\n    });\n  }\n  try {\n    // Create user in Firebase Authentication\n    const userRecord = await auth.createUser({\n      email,\n      password,\n      displayName: name\n    });\n\n    // Save role in Firestore\n    await admin.firestore().collection(\"users\").doc(userRecord.uid).set({\n      email,\n      role,\n      name\n    });\n    res.status(201).json({\n      message: \"User registered successfully\",\n      user: userRecord\n    });\n  } catch (error) {\n    res.status(500).json({\n      error: error.message\n    });\n  }\n});\n\n// Start Server\nconst PORT = 5000;\napp.listen(PORT, () => {\n  console.log(`Server running on http://localhost:${PORT}`);\n});","map":{"version":3,"names":["express","require","admin","bodyParser","cors","app","use","json","serviceAccount","initializeApp","credential","cert","databaseURL","auth","post","req","res","email","password","name","role","body","status","error","userRecord","createUser","displayName","firestore","collection","doc","uid","set","message","user","PORT","listen","console","log"],"sources":["C:/Users/panki/OneDrive/Робочий стіл/pizza-app/src/pages/RegisterPage.jsx"],"sourcesContent":["const express = require(\"express\");\r\nconst admin = require(\"firebase-admin\");\r\nconst bodyParser = require(\"body-parser\");\r\nconst cors = require(\"cors\");\r\n\r\nconst app = express();\r\napp.use(bodyParser.json());\r\napp.use(cors());\r\n\r\n// Initialize Firebase Admin\r\nconst serviceAccount = require(\"./serviceAccountKey.json\");\r\n\r\nadmin.initializeApp({\r\n  credential: admin.credential.cert(serviceAccount),\r\n  databaseURL:\r\n    \"https://pizza-web-app-default-rtdb.europe-west1.firebasedatabase.app\",\r\n});\r\n\r\n// Firebase Authentication reference\r\nconst auth = admin.auth();\r\n\r\n// Registration Route\r\napp.post(\"/register\", async (req, res) => {\r\n  const { email, password, name, role = \"client\" } = req.body;\r\n\r\n  if (!email || !password || !name) {\r\n    return res.status(400).json({ error: \"All fields are required\" });\r\n  }\r\n\r\n  try {\r\n    // Create user in Firebase Authentication\r\n    const userRecord = await auth.createUser({\r\n      email,\r\n      password,\r\n      displayName: name,\r\n    });\r\n\r\n    // Save role in Firestore\r\n    await admin.firestore().collection(\"users\").doc(userRecord.uid).set({\r\n      email,\r\n      role,\r\n      name,\r\n    });\r\n\r\n    res\r\n      .status(201)\r\n      .json({ message: \"User registered successfully\", user: userRecord });\r\n  } catch (error) {\r\n    res.status(500).json({ error: error.message });\r\n  }\r\n});\r\n\r\n// Start Server\r\nconst PORT = 5000;\r\napp.listen(PORT, () => {\r\n  console.log(`Server running on http://localhost:${PORT}`);\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,KAAK,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AACvC,MAAME,UAAU,GAAGF,OAAO,CAAC,aAAa,CAAC;AACzC,MAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMI,GAAG,GAAGL,OAAO,CAAC,CAAC;AACrBK,GAAG,CAACC,GAAG,CAACH,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC;AAC1BF,GAAG,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC,CAAC;;AAEf;AACA,MAAMI,cAAc,GAAGP,OAAO,CAAC,0BAA0B,CAAC;AAE1DC,KAAK,CAACO,aAAa,CAAC;EAClBC,UAAU,EAAER,KAAK,CAACQ,UAAU,CAACC,IAAI,CAACH,cAAc,CAAC;EACjDI,WAAW,EACT;AACJ,CAAC,CAAC;;AAEF;AACA,MAAMC,IAAI,GAAGX,KAAK,CAACW,IAAI,CAAC,CAAC;;AAEzB;AACAR,GAAG,CAACS,IAAI,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACxC,MAAM;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,IAAI;IAAEC,IAAI,GAAG;EAAS,CAAC,GAAGL,GAAG,CAACM,IAAI;EAE3D,IAAI,CAACJ,KAAK,IAAI,CAACC,QAAQ,IAAI,CAACC,IAAI,EAAE;IAChC,OAAOH,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACf,IAAI,CAAC;MAAEgB,KAAK,EAAE;IAA0B,CAAC,CAAC;EACnE;EAEA,IAAI;IACF;IACA,MAAMC,UAAU,GAAG,MAAMX,IAAI,CAACY,UAAU,CAAC;MACvCR,KAAK;MACLC,QAAQ;MACRQ,WAAW,EAAEP;IACf,CAAC,CAAC;;IAEF;IACA,MAAMjB,KAAK,CAACyB,SAAS,CAAC,CAAC,CAACC,UAAU,CAAC,OAAO,CAAC,CAACC,GAAG,CAACL,UAAU,CAACM,GAAG,CAAC,CAACC,GAAG,CAAC;MAClEd,KAAK;MACLG,IAAI;MACJD;IACF,CAAC,CAAC;IAEFH,GAAG,CACAM,MAAM,CAAC,GAAG,CAAC,CACXf,IAAI,CAAC;MAAEyB,OAAO,EAAE,8BAA8B;MAAEC,IAAI,EAAET;IAAW,CAAC,CAAC;EACxE,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdP,GAAG,CAACM,MAAM,CAAC,GAAG,CAAC,CAACf,IAAI,CAAC;MAAEgB,KAAK,EAAEA,KAAK,CAACS;IAAQ,CAAC,CAAC;EAChD;AACF,CAAC,CAAC;;AAEF;AACA,MAAME,IAAI,GAAG,IAAI;AACjB7B,GAAG,CAAC8B,MAAM,CAACD,IAAI,EAAE,MAAM;EACrBE,OAAO,CAACC,GAAG,CAAC,sCAAsCH,IAAI,EAAE,CAAC;AAC3D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}