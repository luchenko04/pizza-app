{"ast":null,"code":"/*! firebase-admin v13.0.1 */\n\"use strict\";\n\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SecurityRulesApiClient = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst error_1 = require(\"../utils/error\");\nconst security_rules_internal_1 = require(\"./security-rules-internal\");\nconst utils = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\nconst RULES_V1_API = 'https://firebaserules.googleapis.com/v1';\nconst FIREBASE_VERSION_HEADER = {\n  'X-Firebase-Client': `fire-admin-node/${utils.getSdkVersion()}`\n};\n/**\n * Class that facilitates sending requests to the Firebase security rules backend API.\n *\n * @private\n */\nclass SecurityRulesApiClient {\n  constructor(app) {\n    this.app = app;\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'First argument passed to admin.securityRules() must be a valid Firebase app ' + 'instance.');\n    }\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n  }\n  getRuleset(name) {\n    return Promise.resolve().then(() => {\n      return this.getRulesetName(name);\n    }).then(rulesetName => {\n      return this.getResource(rulesetName);\n    });\n  }\n  createRuleset(ruleset) {\n    if (!validator.isNonNullObject(ruleset) || !validator.isNonNullObject(ruleset.source) || !validator.isNonEmptyArray(ruleset.source.files)) {\n      const err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Invalid rules content.');\n      return Promise.reject(err);\n    }\n    for (const rf of ruleset.source.files) {\n      if (!validator.isNonNullObject(rf) || !validator.isNonEmptyString(rf.name) || !validator.isNonEmptyString(rf.content)) {\n        const err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', `Invalid rules file argument: ${JSON.stringify(rf)}`);\n        return Promise.reject(err);\n      }\n    }\n    return this.getUrl().then(url => {\n      const request = {\n        method: 'POST',\n        url: `${url}/rulesets`,\n        data: ruleset\n      };\n      return this.sendRequest(request);\n    });\n  }\n  deleteRuleset(name) {\n    return this.getUrl().then(url => {\n      const rulesetName = this.getRulesetName(name);\n      const request = {\n        method: 'DELETE',\n        url: `${url}/${rulesetName}`\n      };\n      return this.sendRequest(request);\n    });\n  }\n  listRulesets(pageSize = 100, pageToken) {\n    if (!validator.isNumber(pageSize)) {\n      const err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Invalid page size.');\n      return Promise.reject(err);\n    }\n    if (pageSize < 1 || pageSize > 100) {\n      const err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Page size must be between 1 and 100.');\n      return Promise.reject(err);\n    }\n    if (typeof pageToken !== 'undefined' && !validator.isNonEmptyString(pageToken)) {\n      const err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Next page token must be a non-empty string.');\n      return Promise.reject(err);\n    }\n    const data = {\n      pageSize,\n      pageToken\n    };\n    if (!pageToken) {\n      delete data.pageToken;\n    }\n    return this.getUrl().then(url => {\n      const request = {\n        method: 'GET',\n        url: `${url}/rulesets`,\n        data\n      };\n      return this.sendRequest(request);\n    });\n  }\n  getRelease(name) {\n    return this.getResource(`releases/${name}`);\n  }\n  updateOrCreateRelease(name, rulesetName) {\n    return this.updateRelease(name, rulesetName).catch(error => {\n      // if ruleset update failed with a NOT_FOUND error, attempt to create instead.\n      if (error.code === `security-rules/${ERROR_CODE_MAPPING.NOT_FOUND}`) {\n        return this.createRelease(name, rulesetName);\n      }\n      throw error;\n    });\n  }\n  updateRelease(name, rulesetName) {\n    return this.getUrl().then(url => {\n      return this.getReleaseDescription(name, rulesetName).then(release => {\n        const request = {\n          method: 'PATCH',\n          url: `${url}/releases/${name}`,\n          data: {\n            release\n          }\n        };\n        return this.sendRequest(request);\n      });\n    });\n  }\n  createRelease(name, rulesetName) {\n    return this.getUrl().then(url => {\n      return this.getReleaseDescription(name, rulesetName).then(release => {\n        const request = {\n          method: 'POST',\n          url: `${url}/releases`,\n          data: release\n        };\n        return this.sendRequest(request);\n      });\n    });\n  }\n  getUrl() {\n    return this.getProjectIdPrefix().then(projectIdPrefix => {\n      return `${RULES_V1_API}/${projectIdPrefix}`;\n    });\n  }\n  getProjectIdPrefix() {\n    if (this.projectIdPrefix) {\n      return Promise.resolve(this.projectIdPrefix);\n    }\n    return utils.findProjectId(this.app).then(projectId => {\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Failed to determine project ID. Initialize the SDK with service account credentials, or ' + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT ' + 'environment variable.');\n      }\n      this.projectIdPrefix = `projects/${projectId}`;\n      return this.projectIdPrefix;\n    });\n  }\n  /**\n   * Gets the specified resource from the rules API. Resource names must be the short names without project\n   * ID prefix (e.g. `rulesets/ruleset-name`).\n   *\n   * @param {string} name Full qualified name of the resource to get.\n   * @returns {Promise<T>} A promise that fulfills with the resource.\n   */\n  getResource(name) {\n    return this.getUrl().then(url => {\n      const request = {\n        method: 'GET',\n        url: `${url}/${name}`\n      };\n      return this.sendRequest(request);\n    });\n  }\n  getReleaseDescription(name, rulesetName) {\n    return this.getProjectIdPrefix().then(projectIdPrefix => {\n      return {\n        name: `${projectIdPrefix}/releases/${name}`,\n        rulesetName: `${projectIdPrefix}/${this.getRulesetName(rulesetName)}`\n      };\n    });\n  }\n  getRulesetName(name) {\n    if (!validator.isNonEmptyString(name)) {\n      throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Ruleset name must be a non-empty string.');\n    }\n    if (name.indexOf('/') !== -1) {\n      throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Ruleset name must not contain any \"/\" characters.');\n    }\n    return `rulesets/${name}`;\n  }\n  sendRequest(request) {\n    request.headers = FIREBASE_VERSION_HEADER;\n    return this.httpClient.send(request).then(resp => {\n      return resp.data;\n    }).catch(err => {\n      throw this.toFirebaseError(err);\n    });\n  }\n  toFirebaseError(err) {\n    if (err instanceof error_1.PrefixedFirebaseError) {\n      return err;\n    }\n    const response = err.response;\n    if (!response.isJson()) {\n      return new security_rules_internal_1.FirebaseSecurityRulesError('unknown-error', `Unexpected response with status: ${response.status} and body: ${response.text}`);\n    }\n    const error = response.data.error || {};\n    let code = 'unknown-error';\n    if (error.status && error.status in ERROR_CODE_MAPPING) {\n      code = ERROR_CODE_MAPPING[error.status];\n    }\n    const message = error.message || `Unknown server error: ${response.text}`;\n    return new security_rules_internal_1.FirebaseSecurityRulesError(code, message);\n  }\n}\nexports.SecurityRulesApiClient = SecurityRulesApiClient;\nconst ERROR_CODE_MAPPING = {\n  INVALID_ARGUMENT: 'invalid-argument',\n  NOT_FOUND: 'not-found',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  UNAUTHENTICATED: 'authentication-error',\n  UNKNOWN: 'unknown-error'\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","SecurityRulesApiClient","api_request_1","require","error_1","security_rules_internal_1","utils","validator","RULES_V1_API","FIREBASE_VERSION_HEADER","getSdkVersion","constructor","app","isNonNullObject","FirebaseSecurityRulesError","httpClient","AuthorizedHttpClient","getRuleset","name","Promise","resolve","then","getRulesetName","rulesetName","getResource","createRuleset","ruleset","source","isNonEmptyArray","files","err","reject","rf","isNonEmptyString","content","JSON","stringify","getUrl","url","request","method","data","sendRequest","deleteRuleset","listRulesets","pageSize","pageToken","isNumber","getRelease","updateOrCreateRelease","updateRelease","catch","error","code","ERROR_CODE_MAPPING","NOT_FOUND","createRelease","getReleaseDescription","release","getProjectIdPrefix","projectIdPrefix","findProjectId","projectId","indexOf","headers","send","resp","toFirebaseError","PrefixedFirebaseError","response","isJson","status","text","message","INVALID_ARGUMENT","RESOURCE_EXHAUSTED","UNAUTHENTICATED","UNKNOWN"],"sources":["C:/Users/panki/OneDrive/Робочий стіл/pizza-app/node_modules/firebase-admin/lib/security-rules/security-rules-api-client-internal.js"],"sourcesContent":["/*! firebase-admin v13.0.1 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SecurityRulesApiClient = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst error_1 = require(\"../utils/error\");\nconst security_rules_internal_1 = require(\"./security-rules-internal\");\nconst utils = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\nconst RULES_V1_API = 'https://firebaserules.googleapis.com/v1';\nconst FIREBASE_VERSION_HEADER = {\n    'X-Firebase-Client': `fire-admin-node/${utils.getSdkVersion()}`,\n};\n/**\n * Class that facilitates sending requests to the Firebase security rules backend API.\n *\n * @private\n */\nclass SecurityRulesApiClient {\n    constructor(app) {\n        this.app = app;\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'First argument passed to admin.securityRules() must be a valid Firebase app '\n                + 'instance.');\n        }\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    }\n    getRuleset(name) {\n        return Promise.resolve()\n            .then(() => {\n            return this.getRulesetName(name);\n        })\n            .then((rulesetName) => {\n            return this.getResource(rulesetName);\n        });\n    }\n    createRuleset(ruleset) {\n        if (!validator.isNonNullObject(ruleset) ||\n            !validator.isNonNullObject(ruleset.source) ||\n            !validator.isNonEmptyArray(ruleset.source.files)) {\n            const err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Invalid rules content.');\n            return Promise.reject(err);\n        }\n        for (const rf of ruleset.source.files) {\n            if (!validator.isNonNullObject(rf) ||\n                !validator.isNonEmptyString(rf.name) ||\n                !validator.isNonEmptyString(rf.content)) {\n                const err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', `Invalid rules file argument: ${JSON.stringify(rf)}`);\n                return Promise.reject(err);\n            }\n        }\n        return this.getUrl()\n            .then((url) => {\n            const request = {\n                method: 'POST',\n                url: `${url}/rulesets`,\n                data: ruleset,\n            };\n            return this.sendRequest(request);\n        });\n    }\n    deleteRuleset(name) {\n        return this.getUrl()\n            .then((url) => {\n            const rulesetName = this.getRulesetName(name);\n            const request = {\n                method: 'DELETE',\n                url: `${url}/${rulesetName}`,\n            };\n            return this.sendRequest(request);\n        });\n    }\n    listRulesets(pageSize = 100, pageToken) {\n        if (!validator.isNumber(pageSize)) {\n            const err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Invalid page size.');\n            return Promise.reject(err);\n        }\n        if (pageSize < 1 || pageSize > 100) {\n            const err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Page size must be between 1 and 100.');\n            return Promise.reject(err);\n        }\n        if (typeof pageToken !== 'undefined' && !validator.isNonEmptyString(pageToken)) {\n            const err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Next page token must be a non-empty string.');\n            return Promise.reject(err);\n        }\n        const data = {\n            pageSize,\n            pageToken,\n        };\n        if (!pageToken) {\n            delete data.pageToken;\n        }\n        return this.getUrl()\n            .then((url) => {\n            const request = {\n                method: 'GET',\n                url: `${url}/rulesets`,\n                data,\n            };\n            return this.sendRequest(request);\n        });\n    }\n    getRelease(name) {\n        return this.getResource(`releases/${name}`);\n    }\n    updateOrCreateRelease(name, rulesetName) {\n        return this.updateRelease(name, rulesetName).catch((error) => {\n            // if ruleset update failed with a NOT_FOUND error, attempt to create instead.\n            if (error.code === `security-rules/${ERROR_CODE_MAPPING.NOT_FOUND}`) {\n                return this.createRelease(name, rulesetName);\n            }\n            throw error;\n        });\n    }\n    updateRelease(name, rulesetName) {\n        return this.getUrl()\n            .then((url) => {\n            return this.getReleaseDescription(name, rulesetName)\n                .then((release) => {\n                const request = {\n                    method: 'PATCH',\n                    url: `${url}/releases/${name}`,\n                    data: { release },\n                };\n                return this.sendRequest(request);\n            });\n        });\n    }\n    createRelease(name, rulesetName) {\n        return this.getUrl()\n            .then((url) => {\n            return this.getReleaseDescription(name, rulesetName)\n                .then((release) => {\n                const request = {\n                    method: 'POST',\n                    url: `${url}/releases`,\n                    data: release,\n                };\n                return this.sendRequest(request);\n            });\n        });\n    }\n    getUrl() {\n        return this.getProjectIdPrefix()\n            .then((projectIdPrefix) => {\n            return `${RULES_V1_API}/${projectIdPrefix}`;\n        });\n    }\n    getProjectIdPrefix() {\n        if (this.projectIdPrefix) {\n            return Promise.resolve(this.projectIdPrefix);\n        }\n        return utils.findProjectId(this.app)\n            .then((projectId) => {\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Failed to determine project ID. Initialize the SDK with service account credentials, or '\n                    + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT '\n                    + 'environment variable.');\n            }\n            this.projectIdPrefix = `projects/${projectId}`;\n            return this.projectIdPrefix;\n        });\n    }\n    /**\n     * Gets the specified resource from the rules API. Resource names must be the short names without project\n     * ID prefix (e.g. `rulesets/ruleset-name`).\n     *\n     * @param {string} name Full qualified name of the resource to get.\n     * @returns {Promise<T>} A promise that fulfills with the resource.\n     */\n    getResource(name) {\n        return this.getUrl()\n            .then((url) => {\n            const request = {\n                method: 'GET',\n                url: `${url}/${name}`,\n            };\n            return this.sendRequest(request);\n        });\n    }\n    getReleaseDescription(name, rulesetName) {\n        return this.getProjectIdPrefix()\n            .then((projectIdPrefix) => {\n            return {\n                name: `${projectIdPrefix}/releases/${name}`,\n                rulesetName: `${projectIdPrefix}/${this.getRulesetName(rulesetName)}`,\n            };\n        });\n    }\n    getRulesetName(name) {\n        if (!validator.isNonEmptyString(name)) {\n            throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Ruleset name must be a non-empty string.');\n        }\n        if (name.indexOf('/') !== -1) {\n            throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Ruleset name must not contain any \"/\" characters.');\n        }\n        return `rulesets/${name}`;\n    }\n    sendRequest(request) {\n        request.headers = FIREBASE_VERSION_HEADER;\n        return this.httpClient.send(request)\n            .then((resp) => {\n            return resp.data;\n        })\n            .catch((err) => {\n            throw this.toFirebaseError(err);\n        });\n    }\n    toFirebaseError(err) {\n        if (err instanceof error_1.PrefixedFirebaseError) {\n            return err;\n        }\n        const response = err.response;\n        if (!response.isJson()) {\n            return new security_rules_internal_1.FirebaseSecurityRulesError('unknown-error', `Unexpected response with status: ${response.status} and body: ${response.text}`);\n        }\n        const error = response.data.error || {};\n        let code = 'unknown-error';\n        if (error.status && error.status in ERROR_CODE_MAPPING) {\n            code = ERROR_CODE_MAPPING[error.status];\n        }\n        const message = error.message || `Unknown server error: ${response.text}`;\n        return new security_rules_internal_1.FirebaseSecurityRulesError(code, message);\n    }\n}\nexports.SecurityRulesApiClient = SecurityRulesApiClient;\nconst ERROR_CODE_MAPPING = {\n    INVALID_ARGUMENT: 'invalid-argument',\n    NOT_FOUND: 'not-found',\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    UNAUTHENTICATED: 'authentication-error',\n    UNKNOWN: 'unknown-error',\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}